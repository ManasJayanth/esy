name: Prepare NPM tarball

on:
  release:
    types: [published]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12'
        check-latest: true
    - name: Create NPM tarball
      run: |
        REST_BASE="https://dev.azure.com/esy-dev"
        PROJ="esy"
        ART_NAME="release" # yes, no .zip
        function fetchLatestBuild() {
          PREFIX="branchName=refs%2Fheads%2F"
          BRANCH="$PREFIXmaster"
          FILTER='deletedFilter=excludeDeleted&statusFilter=completed&resultFilter=succeeded'
          LATEST='queryOrder=finishTimeDescending&$top=1'
          REST_BUILDS="$REST_BASE/$PROJ/_apis/build/builds?${FILTER}&${BRANCH}&${LATEST}&api-version=4.1"
          echo "Rest call for builds: $REST_BUILDS"
          REST_BUILDS_RESP=$(curl "$REST_BUILDS")
          if [[ $REST_BUILDS_RESP =~ (\"web\":\{\"href\":\")([^\"]*) ]]; then LATEST_BUILD_PAGE="${BASH_REMATCH[2]}"; else LATEST_BUILD_PAGE=""; fi
          if [[ $REST_BUILDS_RESP =~ (\"badge\":\{\"href\":\")([^\"]*) ]]; then LATEST_BUILD_BADGE="${BASH_REMATCH[2]}"; else LATEST_BUILD_BADGE=""; fi
          if [[ $REST_BUILDS_RESP =~ (\"id\":)([^,]*) ]]; then LATEST_BUILD_ID="${BASH_REMATCH[2]}"; else LATEST_BUILD_ID=""; fi
        }
        fetchLatestBuild
        function fetchArtifactURL() {
          REST_ART="$REST_BASE/$PROJ/_apis/build/builds/$LATEST_BUILD_ID/artifacts?artifactName=$ART_NAME&api-version=4.1"
          echo "Rest call for artifacts: $REST_ART"
          if [[ $(curl $REST_ART) =~ (downloadUrl\":\")([^\"]*) ]]; then LATEST_ART_URL="${BASH_REMATCH[2]}"; else LATEST_ART_URL=""; fi
        }
        function downloadArtifact() {
          if [ -z "$LATEST_ART_URL" ]
          then
            echo "No latest artifact for merge-target branch found at URL $REST_ART"
          else
            curl "$LATEST_ART_URL" > "$ART_NAME.zip"
            PROJECT_DIR=$PWD
            unzip "$ART_NAME.zip"
            echo "Using Dependency cache for buildID: $LATEST_BUILD_ID"
            echo "Build log for build that produced the cache: $LATEST_BUILD_PAGE"
            echo "Build badge for build that produced the cache: $LATEST_BUILD_BADGE"
            echo "Build artifact from build that produced the cache: $LATEST_ART_URL"
          fi
        }
        fetchArtifactURL
        downloadArtifact
        node scripts/subst-release-version.js
        cd release
        npm pack;
        shasum esy-$(node scripts/echo-version).tgz > SHA1
        shasum -a 512 esy-$(node scripts/echo-version).tgz > SHA512
      shell: bash
    - uses: actions/upload-artifact@v2
      with:
        name: esy-$(node scripts/echo-version).tgz
        path: release/esy-$(node scripts/echo-version).tgz
    - uses: actions/upload-artifact@v2
      with:
        name: SHA1
        path: release/SHA1
    - uses: actions/upload-artifact@v2
      with:
        name: SHA512
        path: release/SHA512
 


